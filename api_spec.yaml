openapi: 3.0.0
servers: []
info:
  description: These are the APIs exposed by our backend SDK. To be consumed by the frontend only.
  version: "1.13.0"
  title: Frontend Driver Interface
  contact:
    email: team@supertokens.io
tags:
  - name: Session Recipe
  - name: EmailPassword Recipe
  - name: ThirdParty Recipe
  - name: ThirdPartyEmailPassword Recipe
  - name: Passwordless Recipe
  - name: ThirdPartyPasswordless Recipe
  - name: EmailVerification Recipe
  - name: JWT Recipe
  - name: OpenId Recipe
paths:
    
  /{apiBasePath}/signinup/code⠀:
    post:
      tags:
        - ThirdPartyPasswordless Recipe
      operationId: thirdPartyPasswordlessSignInUpStart
      description: |
        Start sign in/up process with passwordless.
        
        Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyPasswordlessRid'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    email: 
                      $ref: '#/components/schemas/email'
                  required:
                    - email
                - type: object
                  properties:
                    phoneNumber:
                      $ref: '#/components/schemas/phoneNumber'
                  required:
                    - phoneNumber
      responses:
        '200':
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      deviceId:
                        $ref: '#/components/schemas/deviceId'
                      preAuthSessionId:
                        $ref: '#/components/schemas/preAuthSessionId'
                      flowType:
                        type: string
                        enum: ['MAGIC_LINK', 'USER_INPUT_CODE_AND_MAGIC_LINK', 'USER_INPUT_CODE']
                  - $ref: '#/components/schemas/genericErrorResponse'

        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /{apiBasePath}/signinup/code/resend⠀:
    post:
      tags:
        - ThirdPartyPasswordless Recipe
      operationId: thirdPartyPasswordlessSignInUpResend
      description: |
        Resend passwordless code
        
        Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyPasswordlessRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  $ref: '#/components/schemas/deviceId'
                preAuthSessionId:
                  $ref: '#/components/schemas/preAuthSessionId'
              required:
                - deviceId
                - preAuthSessionId

      responses:
        '200':
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['OK', 'RESTART_FLOW_ERROR']
                  - $ref: '#/components/schemas/genericErrorResponse'

        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /{apiBasePath}/signinup/code/consume⠀:
    post:
      tags:
        - ThirdPartyPasswordless Recipe
      operationId: thirdPartyPasswordlessSignInUpConsume
      description: |
        Finish sign in/up process with passwordless
        
        Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyPasswordlessRid'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    preAuthSessionId:
                      $ref: '#/components/schemas/preAuthSessionId'
                    linkCode:
                      type: string
                      example: b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8
                  required:
                    - preAuthSessionId
                    - linkCode

                - type: object
                  properties:
                    preAuthSessionId:
                      $ref: '#/components/schemas/preAuthSessionId'
                    deviceId:
                      $ref: '#/components/schemas/deviceId'
                    userInputCode:
                      type: string
                      example: 432123
                  required:
                    - preAuthSessionId
                    - deviceId
                    - userInputCode
      responses:
        '200':
          description: Signin/up a user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      createdNewUser:
                        type: boolean
                        example: true
                      user:
                        $ref: '#/components/schemas/passwordlessUser'

                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['INCORRECT_USER_INPUT_CODE_ERROR', 'EXPIRED_USER_INPUT_CODE_ERROR']
                      
                      failedCodeInputAttemptCount:
                        type: number
                        example: 2
                      maximumCodeInputAttempts:
                        type: number
                        example: 5
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['RESTART_FLOW_ERROR']
                  
                  - $ref: '#/components/schemas/genericErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /{apiBasePath}/signup/email/exists⠀⠀⠀:
    get:
      tags:
        - ThirdPartyPasswordless Recipe
      operationId: thirdPartyPasswordlessEmailExists
      description: |
        Check if an email exists
        
        Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyPasswordlessRid'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Checks if an email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  exists:
                    $ref: '#/components/schemas/exists'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /{apiBasePath}/signup/phonenumber/exists⠀:
    get:
      tags:
        - ThirdPartyPasswordless Recipe
      operationId: thirdPartyPasswordlessPhoneNumberExists
      description: |
        Check if a phone number exists
        
        Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyPasswordlessRid'
        - $ref: '#/components/parameters/phoneNumber'
      responses:
        '200':
          description: Checks if an email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  exists:
                    $ref: '#/components/schemas/exists'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /{apiBasePath}/signinup⠀⠀:
    post:
      tags:
        - ThirdPartyPasswordless Recipe
      operationId: thirdPartyPasswordlessSignInUp
      description: |
        Signin/up a user using a Social Provider
        
        Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyPasswordlessRid'
      requestBody:
        description: Should contain one of code or authCodeResponse, clientId is optional
        content:
          application/json:
            schema:
              type: object
              properties:
                redirectURI:
                  $ref: '#/components/schemas/redirectURI'
                thirdPartyId:
                  $ref: '#/components/schemas/thirdPartyId'
                code: 
                  $ref: '#/components/schemas/code'
                authCodeResponse:
                  $ref: '#/components/schemas/authCodeResponse'
                clientId:
                  type: string
                  example: "6779ef20e7...5817b79602"
      responses:
        '200':
          description: Signin/up a user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signinupResponse'
                  - $ref: '#/components/schemas/noEmailGivenByProviderResponse'
                  - $ref: '#/components/schemas/thirdPartyFieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /{apiBasePath}/authorisationurl⠀⠀:
    get:
      tags:
        - ThirdPartyPasswordless Recipe
      operationId: thirdPartyPasswordlessAuthorisationUrl
      description: |
        Signin/up a user
        
        Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyPasswordlessRid'
        - in: query
          name: thirdPartyId
          schema:
            $ref: '#/components/schemas/thirdPartyId'
      responses:
        '200':
          description: Get the OAuth authorisation URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  url:
                    type: string
                    example: https://providerdomain.com/authorize?client_id=..&scope=..&access_type=..
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /{apiBasePath}/callback/apple⠀⠀:
    post:
      tags:
        - ThirdPartyPasswordless Recipe
      operationId: thirdPartyPasswordlessCallbackApple
      description: |
        Handles sign in with the apple.
        
        Note: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: "The Authorization code which will be exchanged for an access token"
                state:
                  type: string
                  description: "A unique string used to mitigate CSRF attacks"
      responses:
        '200':
          description: Returns an HTML page which will redirect the user to the client's app.
          
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  
  /{apiBasePath}/signinup/code:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessSignInUpStart
      description: |
        Start sign in/up process with passwordless
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/passwordlessRid'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    email: 
                      $ref: '#/components/schemas/email'
                  required:
                    - email
                - type: object
                  properties:
                    phoneNumber:
                      $ref: '#/components/schemas/phoneNumber'
                  required:
                    - phoneNumber

      responses:
        '200':
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      deviceId:
                        $ref: '#/components/schemas/deviceId'
                      preAuthSessionId:
                        $ref: '#/components/schemas/preAuthSessionId'
                      flowType:
                        type: string
                        enum: ['MAGIC_LINK', 'USER_INPUT_CODE_AND_MAGIC_LINK', 'USER_INPUT_CODE']
                  - $ref: '#/components/schemas/genericErrorResponse'

        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 

  /{apiBasePath}/signinup/code/resend:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessSignInUpResend
      description: |
        Resend passwordless code
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/passwordlessRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  $ref: '#/components/schemas/deviceId'
                preAuthSessionId:
                  $ref: '#/components/schemas/preAuthSessionId'
              required:
                - deviceId
                - preAuthSessionId

      responses:
        '200':
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['OK', 'RESTART_FLOW_ERROR']
                  - $ref: '#/components/schemas/genericErrorResponse'

        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /{apiBasePath}/signinup/code/consume:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessSignInUpConsume
      description: |
        Finish sign in/up process with passwordless
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/passwordlessRid'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    preAuthSessionId:
                      $ref: '#/components/schemas/preAuthSessionId'
                    linkCode:
                      type: string
                      example: b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8
                  required:
                    - preAuthSessionId
                    - linkCode

                - type: object
                  properties:
                    preAuthSessionId:
                      $ref: '#/components/schemas/preAuthSessionId'
                    deviceId:
                      $ref: '#/components/schemas/deviceId'
                    userInputCode:
                      type: string
                      example: 432123
                  required:
                    - preAuthSessionId
                    - deviceId
                    - userInputCode
      responses:
        '200':
          description: Signin/up a user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      createdNewUser:
                        type: boolean
                        example: true
                      user:
                        $ref: '#/components/schemas/passwordlessUser'

                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['INCORRECT_USER_INPUT_CODE_ERROR', 'EXPIRED_USER_INPUT_CODE_ERROR']
                      
                      failedCodeInputAttemptCount:
                        type: number
                        example: 2
                      maximumCodeInputAttempts:
                        type: number
                        example: 5
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['RESTART_FLOW_ERROR']
                  
                  - $ref: '#/components/schemas/genericErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 

  /{apiBasePath}/signup/email/exists⠀⠀:
    get:
      tags:
        - Passwordless Recipe
      operationId: passwordlessEmailExists
      description: |
        Check if an email exists
        Note that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/passwordlessRid'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Checks if an email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  exists:
                    $ref: '#/components/schemas/exists'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 

  /{apiBasePath}/signup/phonenumber/exists:
    get:
      tags:
        - Passwordless Recipe
      operationId: passwordlessPhoneNumberExists
      description: |
        Check if an email exists
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/passwordlessRid'
        - $ref: '#/components/parameters/phoneNumber'
      responses:
        '200':
          description: Checks if an email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  exists:
                    $ref: '#/components/schemas/exists'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 

  /{apiBasePath}/signout:
    post:
      tags:
        - Session Recipe
      operationId: signout
      description: |
        Logout user
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/rid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Logout user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax sRefreshToken=; Path=/auth/session/refresh; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax sIdRefreshToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax'
            id-refresh-token:
              schema:
                type: string
                example: remove
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: id-refresh-token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'    
  
  /{apiBasePath}/session/refresh:
    post:
      tags:
        - Session Recipe
      operationId: refresh
      description: |
        Refresh the user session
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/anti-csrf'
        - $ref: '#/components/parameters/sIdRefreshToken'
        - $ref: '#/components/parameters/sRefreshToken'
      responses:
        '200':
          description: Refresh users
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: 'id-refresh-token, anti-csrf, front-token'
          
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
          
  
  /{apiBasePath}/signin:
    post:
      tags:
        - EmailPassword Recipe
      operationId: signIn
      description: |
        Signin a user with email ID and password
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/rid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
      responses:
        '200':
          description: Sign in Response
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signInResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
                  - $ref: '#/components/schemas/wrongCredentialsResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/signup:
    post:
      tags:
        - EmailPassword Recipe
      operationId: signUp
      description: |
        Signup a user with email ID and password
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
      responses:
        '200':
          description: Sign up Response
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signupResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/signup/email/exists:
    get:
      tags:
        - EmailPassword Recipe
      operationId: emailExists
      description: |
        Check if an email exists
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailPasswordRid'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Checks if an email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  exists:
                    $ref: '#/components/schemas/exists'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
        
  /{apiBasePath}/user/password/reset/token:
    post:
      tags:
        - EmailPassword Recipe
      operationId: passwordResetToken
      description: |
        Generate a new reset password token for this user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
              example: { formFields: [ {id: 'email', value: 'test@email.com'}]}
      responses:
        '200':
          description: Generate a new reset password token for this user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/passwordResetTokenResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/user/password/reset:
    post:
      tags:
        - EmailPassword Recipe
      operationId: passwordReset
      description: |
        Reset a password using password reset token
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  $ref: '#/components/schemas/method'
                formfields:
                  $ref: '#/components/schemas/formFields'
                token:
                  $ref: '#/components/schemas/token'
              example:  { method: "token", formFields: [{id: "password", value: "newPass123"} ], token: "ZTRiOTBjNz...jI5MTZlODkxw"}
      responses:
        '200':
          description: Reset a password using password reset token
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/passwordResetResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/signinup:
    post:
      tags:
        - ThirdParty Recipe
      operationId: signInUp
      description: |
        Signin/up a user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyRid'
      requestBody:
        description: Should contain one of code or authCodeResponse, clientId is optional 
        content:
          application/json:
            schema:
              type: object
              properties:
                redirectURI:
                  $ref: '#/components/schemas/redirectURI'
                thirdPartyId:
                  $ref: '#/components/schemas/thirdPartyId'
                code: 
                  $ref: '#/components/schemas/code'
                authCodeResponse:
                  $ref: '#/components/schemas/authCodeResponse'
                clientId:
                  type: string
                  example: "6779ef20e7...5817b79602"
      responses:
        '200':
          description: Signin/up a user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signinupResponse'
                  - $ref: '#/components/schemas/noEmailGivenByProviderResponse'
                  - $ref: '#/components/schemas/thirdPartyFieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/authorisationurl:
    get:
      tags:
        - ThirdParty Recipe
      operationId: authorisationUrl
      description: |
        Signin/up a user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyRid'
        - in: query
          name: thirdPartyId
          schema:
            $ref: '#/components/schemas/thirdPartyId'
      responses:
        '200':
          description: Get the OAuth authorisation URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  url:
                    type: string
                    example: https://providerdomain.com/authorize?client_id=..&scope=..&access_type=..

        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/callback/apple:
    post:
      tags:
        - ThirdParty Recipe
      operationId: thirdPartyCallbackApple
      description: |
        Handles sign in with the apple.
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: "The Authorization code which will be exchanged for an access token"
                state:
                  type: string
                  description: "A unique string used to mitigate CSRF attacks"
      responses:
        '200':
          description: Returns an HTML page which will redirect the user to the client's app.
          
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /{apiBasePath}/signin⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordsignIn
      description: |
        Signin a user with email ID and password
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
      responses:
        '200':
          description: Sign in Response
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signInResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
                  - $ref: '#/components/schemas/wrongCredentialsResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /{apiBasePath}/signup⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordsignUp
      description: |
        Signup a user with email ID and password
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
      responses:
        '200':
          description: Sign up Response
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signupResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  
  /{apiBasePath}/signup/email/exists⠀:
    get:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordEmailExists
      description: |
        Check if an email exists
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Checks if an email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  exists:
                    $ref: '#/components/schemas/exists'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
        
  /{apiBasePath}/user/password/reset/token⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordPasswordResetToken
      description: |
        Generate a new reset password token for this user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
              example: { formFields: [ {id: 'email', value: 'test@email.com'}]}
      responses:
        '200':
          description: Generate a new reset password token for this user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/passwordResetTokenResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'  
  
  /{apiBasePath}/user/password/reset⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordPasswordReset
      description: |
        Reset a password using password reset token
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  $ref: '#/components/schemas/method'
                formfields:
                  $ref: '#/components/schemas/formFields'
                token:
                  $ref: '#/components/schemas/token'
              example:  { method: "token", formFields: [{id: "password", value: "newPass123"} ], token: "ZTRiOTBjNz...jI5MTZlODkxw"}
      responses:
        '200':
          description: Reset a password using password reset token
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/passwordResetResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/signinup⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordSignInUp
      description: |
        Signin/up a user using a Social Provider
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        description: Should contain one of code or authCodeResponse, clientId is optional
        content:
          application/json:
            schema:
              type: object
              properties:
                redirectURI:
                  $ref: '#/components/schemas/redirectURI'
                thirdPartyId:
                  $ref: '#/components/schemas/thirdPartyId'
                code: 
                  $ref: '#/components/schemas/code'
                authCodeResponse:
                  $ref: '#/components/schemas/authCodeResponse'
                clientId:
                  type: string
                  example: "6779ef20e7...5817b79602"
      responses:
        '200':
          description: Signin/up a user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signinupResponse'
                  - $ref: '#/components/schemas/noEmailGivenByProviderResponse'
                  - $ref: '#/components/schemas/thirdPartyFieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/authorisationurl⠀:
    get:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordAuthorisationUrl
      description: |
        Signin/up a user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
        - in: query
          name: thirdPartyId
          schema:
            $ref: '#/components/schemas/thirdPartyId'
      responses:
        '200':
          description: Get the OAuth authorisation URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  url:
                    type: string
                    example: https://providerdomain.com/authorize?client_id=..&scope=..&access_type=..
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  
  /{apiBasePath}/callback/apple⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordCallbackApple
      description: |
        Handles sign in with the apple.
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: "The Authorization code which will be exchanged for an access token"
                state:
                  type: string
                  description: "A unique string used to mitigate CSRF attacks"
      responses:
        '200':
          description: Returns an HTML page which will redirect the user to the client's app.
          
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
          
  
  
  /{apiBasePath}/user/email/verify/token:
    post:
      tags:
        - EmailVerification Recipe
      operationId: verifyEmailToken
      description: |
        Send email verification email
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailVerificationRid'
        - $ref: '#/components/parameters/anti-csrf'
        - $ref: '#/components/parameters/sAccessToken'
        - $ref: '#/components/parameters/sIdRefreshToken'
      responses:
        '200':
          description: Send email verification email
          headers:
            sAccessToken:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax;
            front-token:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: 'front-token' 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['OK', 'EMAIL_ALREADY_VERIFIED_ERROR']
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/user/email/verify:
    post:
      tags:
        - EmailVerification Recipe
      operationId: verifyEmail
      description: |
        Verify an email
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailVerificationRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  $ref: '#/components/schemas/method'
                token:
                  $ref: '#/components/schemas/token'
      responses:
        '200':
          description: Verify an email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['OK', 'EMAIL_VERIFICATION_INVALID_TOKEN_ERROR']
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
    
    get:
      tags:
        - EmailVerification Recipe
      operationId: getVerifyEmail
      description: |
        Check if an email is verified
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailVerificationRid'
        - $ref: '#/components/parameters/anti-csrf'
        - $ref: '#/components/parameters/sAccessToken'
        - $ref: '#/components/parameters/sIdRefreshToken'
      responses:
        '200':
          description: check if an email is verified
          headers:
            sAccessToken:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax;
            front-token:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: 'front-token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  isVerified:
                    type: boolean
                    example: true
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /{apiBasePath}/jwt/jwks.json:
    get:
      tags:
        - JWT Recipe
      operationId: getJWKS
      description: |
        Get all JSON web keys for JWT verification
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
      responses:
        '200':
          description: Retrieve JWKs for JWT verification
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items: 
                      type: object
                      description: A JWK that can be used to verify a JWT
                      properties:
                        alg:
                          type: string
                          description: The algorithm to use when creating the JWT.
                          enum: ["RS256"]
                        kty:
                          type: string
                          example: RSA
                        use:
                          type: string
                          example: sig
                        kid:
                          type: string
                          description: Unique identifier for the JWK
                        n:
                          type: string
                          description: Modulus for the key
                        e: 
                          type: string
                          description: Exponent for the key
          
        '400':
          $ref: '#/components/responses/400'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'      

  /{apiBasePath}/.well-known/openid-configuration:
    get:
      tags:
        - OpenId Recipe
      operationId: getOpenIdDiscoveryConfiguration
      description: |
        Get OpenID discovery configuration
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
      responses:
        '200':
          description: Retrieve OpenID configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    description: URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier (https://openid.net/specs/openid-connect-discovery-1_0.html section 3)
                    example: https://api.example.com/auth
                  jwks_uri:
                    type: string
                    description: URL for fetching a list JsonWebKey, used for JWT signature verification. Refer to /jwt/jwks.json API in the JWT recipe for JWK details
                    example: https://api.example.com/auth/jwt/jwks.json

        '400':
          $ref: '#/components/responses/400'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'  
      
components:
  parameters:
    rid:
      name: rid
      in: header
      example: session
      schema:
        type: string
        
    emailPasswordRid:
      name: rid
      in: header
      example: emailpassword
      schema:
        type: string
    
    thirdPartyRid:
      name: rid
      in: header
      example: thirdparty
      schema:
        type: string
    
    thirdPartyEmailPasswordRid:
      name: rid
      in: header
      example: thirdpartyemailpassword
      schema:
        type: string

    passwordlessRid:
      name: rid
      in: header
      example: passwordless
      schema:
        type: string
    
    thirdPartyPasswordlessRid:
      name: rid
      in: header
      example: thirdpartypasswordless
      schema:
        type: string

    emailVerificationRid:
      name: rid
      in: header
      example: emailverification
      schema:
        type: string
    
        
    anti-csrf:
      name: anti-csrf
      in: header
      description: This will only be here if enabled by the user.
      schema:
        $ref: '#/components/schemas/token'
        
    apiBasePath:
      name: apiBasePath
      in: path
      description: Its value depends on the apiBasePath set by the user
      required: true
      schema:
        type: string
        example: auth
        
    email:
      name: email
      in: query
      required: true
      schema:
        type: string
        example: johndoe@gmail.com

    phoneNumber:
      name: phoneNumber
      in: query
      required: true
      schema:
        type: string
        example: '0036701234567'
    
    sRefreshToken:
      in: cookie
      name: sRefreshToken
      required: true
      schema:
        $ref: '#/components/schemas/cookie'
    
    sIdRefreshToken:
      in: cookie
      name: sIdRefreshToken
      required: true
      schema:
        $ref: '#/components/schemas/cookie'
    
    sAccessToken:
      in: cookie
      name: sAccessToken
      required: true
      schema:
        $ref: '#/components/schemas/cookie'
      
  responses:

    500:
      description: error code 500
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/internalError"

    400:
      description: error code 400
      content:
        text/plain:
          schema: 
            $ref: "#/components/schemas/badRequest"


    404:
      description: error code 404
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/notFound"
  

      
      
  schemas:
    statusOK:
      type: string
      enum:
        - OK
    
    token:
      type: string
      example: ZTRiOTBjNz...jI5MTZlODkxw
    
    cookie:
      type: string
      example: ed3164...06c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
      
    
    id: 
      type: string
      enum: ['email', 'password']
    
    userId:
      type: string
      example: fa7a0841-b533-4478-95533-0fde890c3483

    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        email:
          type: string
          example: johndoe@gmail.com
        timeJoined:
          type: number
          example: 1638433545183

    email:
      type: string
      example: johndoe@gmail.com

    phoneNumber:
      type: string
      example: '0036701234567'

    deviceId:
      type: string
      description: This should be saved on the starting device to enable the manual code entry flow.
      example: TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk=

    preAuthSessionId:
      type: string
      description: An identifier that used to identify the login attempt/device.
      example: kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs=

    passwordlessUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        email:
          $ref: '#/components/schemas/email'
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        timeJoined:
          type: number
          example: 1638433545183
    
    thirdPartyId:
      type: string
      example: google
    
    exists:
          type: boolean
          example: true
    
    method:
          type: string
          example: "token"
    
    code:
      $ref: '#/components/schemas/token'
      
    authCodeResponse:
      description: Can contain random data other than the two listed below
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
        id_token:
          type: string
      
    redirectURI: 
      type: string
      example: https://yourdomain.com/callback
    
    formFields:
      type: array
      items:
        type: object
        properties:
          id:
            $ref: '#/components/schemas/id'
          value:
            type: string
      example: [ {id: email, value: johndoe@gmail.com},{id: password, value: testPass123}]

    signInResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
        user:
          $ref: '#/components/schemas/user'
    
    signupResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
        user:
          $ref: '#/components/schemas/user'
          

    passwordResetTokenResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
    
    signinupResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
        user:
          $ref: '#/components/schemas/user'
        createdNewUser:
          type: boolean
          example: true

    passwordResetResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'RESET_PASSWORD_INVALID_TOKEN_ERROR']
        
    
    fieldErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['FIELD_ERROR']
        formFields:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: email
              error:
                type: string
                example: "Error Message"
      
    genericErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['GENERAL_ERROR']
        message:
          type: string
          example: "Error Message"

    wrongCredentialsResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['WRONG_CREDENTIALS_ERROR']
 
    noEmailGivenByProviderResponse:
      type: object
      properties:
        status: 
          type: string
          enum: ['NO_EMAIL_GIVEN_BY_PROVIDER']
          
    thirdPartyFieldErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['FIELD_ERROR']
        error: 
          type: string
          example: 'Error Message'

    internalError:
      type: string
      enum: 
        - Internal Error

    badRequest:
      type: string
      enum:
      - Bad request
    
    notFound:
      type: string
      enum:
        - Not Found