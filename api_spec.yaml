openapi: 3.0.0
servers: []
info:
  description: Frontend Driver Interface http requests-responses
  version: "1.10.0"
  title: Frontend Driver Interface
  contact:
    email: team@supertokens.io
tags:
  - name: Session Recipe
  - name: EmailPassword Recipe
  - name: ThirdParty Recipe
  - name: ThirdPartyEmailPassword Recipe
  - name: EmailVerification Recipe
  - name: JWT Recipe
  - name: Development
paths:
  /{apiBasePath}/signout:
    post:
      tags:
        - Session Recipe
      operationId: signout
      description: |
        Logout user
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/rid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Logout user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax sRefreshToken=; Path=/auth/session/refresh; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax sIdRefreshToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax'
            id-refresh-token:
              schema:
                type: string
                example: remove
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: id-refresh-token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'    
  
  /{apiBasePath}/session/refresh:
    post:
      tags:
        - Session Recipe
      operationId: refresh
      description: |
        Refresh the user session
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/anti-csrf'
        - $ref: '#/components/parameters/sIdRefreshToken'
        - $ref: '#/components/parameters/sRefreshToken'
      responses:
        '200':
          description: Refresh users
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: 'id-refresh-token, anti-csrf, front-token'
          
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
          
  /example-create-new-session:
    post:
      tags:
        - Session Recipe
      operationId: createNewSession
      description: |
        Note: This endpoint does not exist, it is an example endpoint.
      parameters: 
        - $ref: '#/components/parameters/rid'
      responses:
        '200':
          description: create a new session
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token', 'anti-csrf', 'front-token']
          
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /example-verify-session:
    post:
      tags:
        - Session Recipe
      operationId: verifySession
      description: |
        Note: This endpoint does not exist, it is an example endpoint.
      parameters:
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/anti-csrf'
        - $ref: '#/components/parameters/sAccessToken'
        - $ref: '#/components/parameters/sIdRefreshToken'
      responses:
        '200':
          description: verify session
          headers:
            sAccessToken:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax;
            front-token:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: 'front-token'
          
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
      
  
  /{apiBasePath}/signin:
    post:
      tags:
        - EmailPassword Recipe
      operationId: signIn
      description: |
        Signin a user with email ID and password
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/rid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
      responses:
        '200':
          description: Sign in Response
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signInResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
                  - $ref: '#/components/schemas/wrongCredentialsResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/signup:
    post:
      tags:
        - EmailPassword Recipe
      operationId: signUp
      description: |
        Signup a user with email ID and password
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
      responses:
        '200':
          description: Sign up Response
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signupResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/signup/email/exists:
    get:
      tags:
        - EmailPassword Recipe
      operationId: emailExists
      description: |
        Check if an email exists
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailPasswordRid'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Checks if an email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  exists:
                    $ref: '#/components/schemas/exists'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
        
  /{apiBasePath}/user/password/reset/token:
    post:
      tags:
        - EmailPassword Recipe
      operationId: passwordResetToken
      description: |
        Generate a new reset password token for this user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
              example: { formFields: [ {id: 'email', value: 'test@email.com'}]}
      responses:
        '200':
          description: Generate a new reset password token for this user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/passwordResetTokenResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/user/password/reset:
    post:
      tags:
        - EmailPassword Recipe
      operationId: passwordReset
      description: |
        Reset a password using password reset token
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  $ref: '#/components/schemas/method'
                formfields:
                  $ref: '#/components/schemas/formFields'
                token:
                  $ref: '#/components/schemas/token'
              example:  { method: "token", formFields: [{id: "password", value: "newPass123"} ], token: "ZTRiOTBjNz...jI5MTZlODkxw"}
      responses:
        '200':
          description: Reset a password using password reset token
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/passwordResetResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/signinup:
    post:
      tags:
        - ThirdParty Recipe
      operationId: signInUp
      description: |
        Signin/up a user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                redirect_uri:
                  $ref: '#/components/schemas/redirect_uri'
                thirdPartyId:
                  $ref: '#/components/schemas/thirdPartyId'
                code: 
                  $ref: '#/components/schemas/code'
      responses:
        '200':
          description: Signin/up a user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signinupResponse'
                  - $ref: '#/components/schemas/noEmailGivenByProviderResponse'
                  - $ref: '#/components/schemas/thirdPartyFieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/authorisationurl:
    get:
      tags:
        - ThirdParty Recipe
      operationId: authorisationUrl
      description: |
        Signin/up a user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyRid'
        - in: query
          name: thirdPartyId
          schema:
            $ref: '#/components/schemas/thirdPartyId'
      responses:
        '200':
          description: Get the OAuth authorisation URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  url:
                    type: string
                    example: https://yourdomain.com/authorize?
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/signin⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordsignIn
      description: |
        Signin a user with email ID and password
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
      responses:
        '200':
          description: Sign in Response
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signInResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
                  - $ref: '#/components/schemas/wrongCredentialsResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /{apiBasePath}/signup⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordsignUp
      description: |
        Signup a user with email ID and password
      parameters: 
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
      responses:
        '200':
          description: Sign up Response
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signupResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  
  /{apiBasePath}/signup/email/exists⠀:
    get:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordEmailExists
      description: |
        Check if an email exists
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Checks if an email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  exists:
                    $ref: '#/components/schemas/exists'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
        
  /{apiBasePath}/user/password/reset/token⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordPasswordResetToken
      description: |
        Generate a new reset password token for this user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                formFields:
                  $ref: '#/components/schemas/formFields'
              example: { formFields: [ {id: 'email', value: 'test@email.com'}]}
      responses:
        '200':
          description: Generate a new reset password token for this user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/passwordResetTokenResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'  
  
  /{apiBasePath}/user/password/reset⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordPasswordReset
      description: |
        Reset a password using password reset token
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  $ref: '#/components/schemas/method'
                formfields:
                  $ref: '#/components/schemas/formFields'
                token:
                  $ref: '#/components/schemas/token'
              example:  { method: "token", formFields: [{id: "password", value: "newPass123"} ], token: "ZTRiOTBjNz...jI5MTZlODkxw"}
      responses:
        '200':
          description: Reset a password using password reset token
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/passwordResetResponse'
                  - $ref: '#/components/schemas/fieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/signinup⠀:
    post:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordSignInUp
      description: |
        Signin/up a user using a Social Provider
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                redirect_uri:
                  $ref: '#/components/schemas/redirect_uri'
                thirdPartyId:
                  $ref: '#/components/schemas/thirdPartyId'
                code: 
                  $ref: '#/components/schemas/code'
      responses:
        '200':
          description: Signin/up a user
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax; sIdRefreshToken=6ed3...6c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax'
            
            anti-csrf:
              description: This will only be here if enabled by the user
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              schema:
                $ref: '#/components/schemas/token'
            id-refresh-token:
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              schema:
                type: string
                enum: ['id-refresh-token, anti-csrf, front-token']
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/signinupResponse'
                  - $ref: '#/components/schemas/noEmailGivenByProviderResponse'
                  - $ref: '#/components/schemas/thirdPartyFieldErrorResponse'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/authorisationurl⠀:
    get:
      tags:
        - ThirdPartyEmailPassword Recipe
      operationId: thirdPartyEmailPasswordAuthorisationUrl
      description: |
        Signin/up a user
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/thirdPartyEmailPasswordRid'
        - in: query
          name: thirdPartyId
          schema:
            $ref: '#/components/schemas/thirdPartyId'
      responses:
        '200':
          description: Get the OAuth authorisation URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  url:
                    type: string
                    example: https://yourdomain.com/authorize?
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  
  
  /{apiBasePath}/user/email/verify/token:
    post:
      tags:
        - EmailVerification Recipe
      operationId: verifyEmailToken
      description: |
        Send email verification email
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailVerificationRid'
        - $ref: '#/components/parameters/anti-csrf'
        - $ref: '#/components/parameters/sAccessToken'
        - $ref: '#/components/parameters/sIdRefreshToken'
      responses:
        '200':
          description: Send email verification email
          headers:
            sAccessToken:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax;
            front-token:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: 'front-token' 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['OK', 'EMAIL_ALREADY_VERIFIED_ERROR']
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
  
  /{apiBasePath}/user/email/verify:
    post:
      tags:
        - EmailVerification Recipe
      operationId: verifyEmail
      description: |
        Verify an email
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailVerificationRid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  $ref: '#/components/schemas/method'
                token:
                  $ref: '#/components/schemas/token'
      responses:
        '200':
          description: Verify an email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['OK', 'EMAIL_VERIFICATION_INVALID_TOKEN_ERROR']
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500' 
    
    get:
      tags:
        - EmailVerification Recipe
      operationId: getVerifyEmail
      description: |
        Check if an email is verified
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
        - $ref: '#/components/parameters/emailVerificationRid'
        - $ref: '#/components/parameters/anti-csrf'
        - $ref: '#/components/parameters/sAccessToken'
        - $ref: '#/components/parameters/sIdRefreshToken'
      responses:
        '200':
          description: check if an email is verified
          headers:
            sAccessToken:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax;
            front-token:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              description: Is sent if the session gets refreshed or regenerated.
              schema:
                type: string
                example: 'front-token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  isVerified:
                    type: boolean
                    example: true
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /{apiBasePath}/jwt/jwks.json:
    get:
      tags:
        - JWT Recipe
      operationId: getJWKS
      description: |
        Get all JSON web keys for JWT verification
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
      responses:
        '200':
          description: Retrieve JWKs for JWT verification
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items: 
                      type: object
                      description: A JWK that can be used to verify a JWT
                      properties:
                        alg:
                          type: string
                          description: The algorithm to use when creating the JWT.
                          enum: ["RS256"]
                        kty:
                          type: string
                          example: RSA
                        use:
                          type: string
                          example: sig
                        kid:
                          type: string
                          description: Unique identifier for the JWK
                        n:
                          type: string
                          description: Modulus for the key
                        e: 
                          type: string
                          description: Exponent for the key
          
        '400':
          $ref: '#/components/responses/400'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /{apiBasePath}/status:
    get:
      tags:
        - Development
      description: |
        Health Check API
      parameters:
        - $ref: '#/components/parameters/apiBasePath'
      responses:
        '200':
          description: Health Check API
          content:
            application/json:
              schema:
                type: object
                description: Status with an Optional message
                properties:
                  status:
                    type: string
                    enum: ["OK"]
                  message:
                    type: string
                    enum: ["You are currently using try.supertokens.io for your core. This is for demo purposes only, so please replace this with the address of your managed core instance (sign up on supertokens.io), or the address of your self host a core instance", "You are currently using development OAuth keys, Please replace them with your own keys for production use"]
                    
              
        '400':
          $ref: '#/components/responses/400'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                description: Invalid core configuration
                properties:
                  message:
                    type: string
                    enum: ["There is no core to query, please check your connection uri", "The configured SuperTokens core requires an API key. Please make sure that you have set it in your backend init function call. If using our managed service, you can find your API key on the dashboard at supertokens.io", 'It seems like your API key is incorrect. Please double check that you have provided the right key.']
                    
      
components:
  parameters:
    rid:
      name: rid
      in: header
      example: session
      schema:
        type: string
        
    emailPasswordRid:
      name: rid
      in: header
      example: emailpassword
      schema:
        type: string
    
    thirdPartyRid:
      name: rid
      in: header
      example: thirdparty
      schema:
        type: string
    
    thirdPartyEmailPasswordRid:
      name: rid
      in: header
      example: thirdpartyemailpassword
      schema:
        type: string
    
    emailVerificationRid:
      name: rid
      in: header
      example: emailverification
      schema:
        type: string
    
        
    anti-csrf:
      name: anti-csrf
      in: header
      description: This will only be here if enabled by the user.
      schema:
        $ref: '#/components/schemas/token'
        
    apiBasePath:
      name: apiBasePath
      in: path
      description: Its value depends on the apiBasePath set by the user
      required: true
      schema:
        type: string
        example: auth
        
    email:
      name: email
      in: query
      required: true
      schema:
        type: string
        example: johndoe@gmail.com
    
    sRefreshToken:
      in: cookie
      name: sRefreshToken
      required: true
      schema:
        $ref: '#/components/schemas/cookie'
    
    sIdRefreshToken:
      in: cookie
      name: sIdRefreshToken
      required: true
      schema:
        $ref: '#/components/schemas/cookie'
    
    sAccessToken:
      in: cookie
      name: sAccessToken
      required: true
      schema:
        $ref: '#/components/schemas/cookie'
      
  responses:
    
    500:
      description: error code 500
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/internalError"

    400:
      description: error code 400
      content:
        text/plain:
          schema: 
            $ref: "#/components/schemas/badRequest"


    404:
      description: error code 404
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/notFound"
  

      
      
  schemas:
    statusOK:
      type: string
      enum:
        - OK
    
    token:
      type: string
      example: ZTRiOTBjNz...jI5MTZlODkxw
    
    cookie:
      type: string
      example: ed3164...06c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
      
    
    id: 
      type: string
      enum: ['email', 'password']
    
    user:
      type: object
      properties:
        id:
          type: string
          example: fa7a0841-b533-4478-95533-0fde890c3483
        email:
          type: string
          example: johndoe@gmail.com
    
    thirdPartyId:
      type: string
      example: google
    
    exists:
          type: boolean
          example: true
    
    method:
          type: string
          example: "token"
    
    code:
      $ref: '#/components/schemas/token'
      
    redirect_uri: 
      type: string
      example: https://yourdomain.com/callback
    
    formFields:
      type: array
      items:
        type: object
        properties:
          id:
            $ref: '#/components/schemas/id'
          value:
            type: string
      example: [ {id: email, value: johndoe@gmail.com},{id: password, value: testPass123}]
    
    
    signInResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
        user:
          $ref: '#/components/schemas/user'
    
    signupResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
        user:
          $ref: '#/components/schemas/user'
          

    passwordResetTokenResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
    
    signinupResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
        user:
          $ref: '#/components/schemas/user'
        createdNewUser:
          type: boolean
          example: true
    
    passwordResetResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'RESET_PASSWORD_INVALID_TOKEN_ERROR']
        
    
    fieldErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['FIELD_ERROR']
        formFields:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: email
              error:
                type: string
                example: "Error Message"
      
    wrongCredentialsResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['WRONG_CREDENTIALS_ERROR']
    
    noEmailGivenByProviderResponse:
      type: object
      properties:
        status: 
          type: string
          enum: ['NO_EMAIL_GIVEN_BY_PROVIDER']
          
    thirdPartyFieldErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['FIELD_ERROR']
        error: 
          type: string
          example: 'Error Message'
    
    internalError:
      type: string
      enum: 
        - Internal Error

    badRequest:
      type: string
      enum:
      - Bad request
    
    notFound:
      type: string
      enum:
        - Not Found